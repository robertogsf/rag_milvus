#!/usr/bin/env python3
"""
Script de configuraci√≥n para el sistema RAG con Milvus y Ollama
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description):
    """Ejecutar un comando del sistema"""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} completado")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error en {description}: {e}")
        print(f"Output: {e.stdout}")
        print(f"Error: {e.stderr}")
        return False

def check_ollama():
    """Verificar si Ollama est√° instalado y funcionando"""
    print("üîç Verificando Ollama...")
    try:
        result = subprocess.run("ollama --version", shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ Ollama encontrado: {result.stdout.strip()}")
        
        # Verificar si el modelo qwen3:4b est√° disponible
        result = subprocess.run("ollama list", shell=True, check=True, capture_output=True, text=True)
        if "qwen3:4b" in result.stdout:
            print("‚úÖ Modelo qwen3:4b encontrado")
            return True
        else:
            print("‚ö†Ô∏è  Modelo qwen3:4b no encontrado. Descargando...")
            return run_command("ollama pull qwen3:4b", "Descarga del modelo qwen3:4b")
    except subprocess.CalledProcessError:
        print("‚ùå Ollama no est√° instalado o no est√° funcionando")
        print("Por favor, instala Ollama desde: https://ollama.ai/")
        return False

def check_docker():
    """Verificar si Docker est√° instalado"""
    print("üîç Verificando Docker...")
    try:
        result = subprocess.run("docker --version", shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ Docker encontrado: {result.stdout.strip()}")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Docker no est√° instalado")
        print("Por favor, instala Docker desde: https://docs.docker.com/get-docker/")
        return False

def install_python_dependencies():
    """Instalar dependencias de Python"""
    print("üì¶ Instalando dependencias de Python...")
    return run_command(f"{sys.executable} -m pip install -r requirements.txt", "Instalaci√≥n de dependencias")

def setup_environment():
    """Configurar archivo de entorno"""
    env_file = Path(".env")
    if not env_file.exists():
        print("üìù Creando archivo .env...")
        with open(env_file, "w") as f:
            f.write("""# Configuraci√≥n de Ollama y Milvus
OLLAMA_HOST=localhost
OLLAMA_PORT=11434
OLLAMA_MODEL=qwen3:4b
MILVUS_HOST=localhost
MILVUS_PORT=19530
""")
        print("‚úÖ Archivo .env creado")
    else:
        print("‚úÖ Archivo .env ya existe")

def main():
    """Funci√≥n principal de configuraci√≥n"""
    print("üöÄ CONFIGURACI√ìN DEL SISTEMA RAG")
    print("="*40)
    
    # Verificar Ollama
    if not check_ollama():
        print("‚ùå Configuraci√≥n fallida: Ollama no disponible")
        sys.exit(1)
    
    # Verificar Docker
    if not check_docker():
        print("‚ùå Configuraci√≥n fallida: Docker no disponible")
        sys.exit(1)
    
    # Configurar entorno
    setup_environment()
    
    # Instalar dependencias
    if not install_python_dependencies():
        print("‚ùå Configuraci√≥n fallida: Error instalando dependencias")
        sys.exit(1)
    
    print("\nüéâ CONFIGURACI√ìN COMPLETADA")
    print("="*40)
    print("Siguiente pasos:")
    print("1. Ejecuta: ./start_milvus.sh (para iniciar Milvus)")
    print("2. Ejecuta: python example.py (para probar el sistema)")
    print("\nAseg√∫rate de que Ollama est√© ejecut√°ndose en segundo plano.")

if __name__ == "__main__":
    main()
