#!/usr/bin/env python3
"""
Script de prueba para el sistema RAG dockerizado
"""

import os
import time
import logging
from rag_system import RAGSystem
from dotenv import load_dotenv

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/app/logs/rag_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def wait_for_services():
    """Esperar a que los servicios est√©n disponibles"""
    logger.info("Esperando a que los servicios est√©n disponibles...")
    
    # Esperar a Ollama
    max_retries = 30
    for i in range(max_retries):
        try:
            import ollama
            ollama_host = os.getenv('OLLAMA_HOST', 'localhost')
            ollama_port = os.getenv('OLLAMA_PORT', '11434')
            client = ollama.Client(host=f'http://{ollama_host}:{ollama_port}')
            client.list()
            logger.info("‚úÖ Ollama est√° disponible")
            break
        except Exception as e:
            if i == max_retries - 1:
                logger.error(f"‚ùå No se pudo conectar a Ollama despu√©s de {max_retries} intentos")
                raise
            logger.info(f"‚è≥ Esperando a Ollama... ({i+1}/{max_retries})")
            time.sleep(2)
    
    # Esperar a Milvus
    for i in range(max_retries):
        try:
            from pymilvus import connections
            milvus_host = os.getenv('MILVUS_HOST', 'localhost')
            milvus_port = os.getenv('MILVUS_PORT', '19530')
            connections.connect(host=milvus_host, port=milvus_port)
            connections.disconnect("default")
            logger.info("‚úÖ Milvus est√° disponible")
            break
        except Exception as e:
            if i == max_retries - 1:
                logger.error(f"‚ùå No se pudo conectar a Milvus despu√©s de {max_retries} intentos")
                raise
            logger.info(f"‚è≥ Esperando a Milvus... ({i+1}/{max_retries})")
            time.sleep(2)

def main():
    """Funci√≥n principal de prueba"""
    try:
        logger.info("üöÄ Iniciando prueba del sistema RAG")
        
        # Cargar variables de entorno
        load_dotenv()
        
        # Esperar a que los servicios est√©n listos
        wait_for_services()
        
        # Inicializar el sistema RAG
        logger.info("üîß Inicializando sistema RAG...")
        rag = RAGSystem()
        
        # Documentos de ejemplo
        documentos_ejemplo = [
            "Python es un lenguaje de programaci√≥n de alto nivel, interpretado y de prop√≥sito general. Es conocido por su sintaxis clara y legible.",
            "Milvus es una base de datos vectorial de c√≥digo abierto construida para manejar embeddings vectoriales y b√∫squedas de similitud.",
            "RAG (Retrieval-Augmented Generation) es una t√©cnica que combina la recuperaci√≥n de informaci√≥n relevante con la generaci√≥n de texto.",
            "Docker es una plataforma que permite desarrollar, enviar y ejecutar aplicaciones en contenedores.",
            "Ollama es una herramienta que permite ejecutar modelos de lenguaje grandes localmente en tu m√°quina.",
            "Los embeddings son representaciones vectoriales de texto que capturan el significado sem√°ntico de las palabras.",
            "La b√∫squeda sem√°ntica utiliza embeddings para encontrar contenido similar bas√°ndose en el significado, no solo en palabras clave."
        ]
        
        # A√±adir documentos al sistema
        logger.info("üìÑ A√±adiendo documentos al sistema...")
        rag.add_documents(documentos_ejemplo)
        
        # Realizar consultas de ejemplo
        consultas = [
            "¬øQu√© es Python?",
            "¬øC√≥mo funciona Milvus?",
            "Expl√≠came qu√© es RAG",
            "¬øPara qu√© sirve Docker?",
            "¬øQu√© son los embeddings?"
        ]
        
        logger.info("‚ùì Realizando consultas de ejemplo...")
        for i, consulta in enumerate(consultas, 1):
            logger.info(f"\n--- Consulta {i}: {consulta} ---")
            try:
                respuesta = rag.query(consulta)
                logger.info(f"Respuesta: {respuesta}")
            except Exception as e:
                logger.error(f"Error en consulta '{consulta}': {e}")
        
        logger.info("\n‚úÖ Prueba completada exitosamente!")
        
    except Exception as e:
        logger.error(f"‚ùå Error en la prueba: {e}")
        raise

if __name__ == "__main__":
    main()
